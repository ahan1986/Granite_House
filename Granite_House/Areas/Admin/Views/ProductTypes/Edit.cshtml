@*because we don't need a list of the data, we don't need to set this up as IEnumerable<>. We will be dealing with single Granite types*@
@model Granite_House.Models.ProductTypes
@{
    ViewData["Title"] = "Edit";
}

<h2>Edit Product Type</h2>
<br />
<h2 class="text-info"> Edit Product Type </h2>

<form method="post" asp-action="Edit">
    <div class="p-4 border rounded">
        @*added this hidden input and have asp-for to use the int id in the Edit method so that when it get's posted we will have the id. I'm checking this and it seems like the input for asp-for is not needed*@
        <input type="hidden" asp-for="Id" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group row">
            <div class="col-2">
                @*when you use asp-for. It will bind the Name to productsTypes name property.*@
                <label asp-for="Name"></label>
            </div>
            <div class="col-5">
                <input asp-for="Name" class="form-control" />
            </div>
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
        <div class="form-group">
            @*asp-route-id => this will bring the Model.Id to the params for POST action method for Edit()*@
            <input type="submit" class="btn btn-primary" asp-route-ID="@Model.Id" value="Update" />
            @*we didnt reference area because we are in the same area*@
            <a asp-action="Index1" class="btn btn-success">Back to List</a>
        </div>
    </div>
</form>

@section Scripts{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial.cshtml"); }
}